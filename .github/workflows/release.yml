name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write
  id-token: write  # Required for trusted publishing to PyPI

jobs:
  test:
    name: Test before release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        id: setup-python
        with:
          python-version: "3.11"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: "1.8.5"
          virtualenvs-create: true
          virtualenvs-in-project: true
          virtualenvs-path: .venv
          installer-parallel: true

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Run tests
        run: |
          source .venv/bin/activate
          pytest --cov=make_api_request --cov-report=term-missing

  build:
    name: Build distribution
    runs-on: ubuntu-latest
    needs: test
    outputs:
      hashes: ${{ steps.hash.outputs.hashes }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        id: setup-python
        with:
          python-version: "3.11"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: "1.8.5"
          virtualenvs-create: true
          virtualenvs-in-project: true
          virtualenvs-path: .venv
          installer-parallel: true

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Build package
        run: poetry build

      - name: Generate hashes for provenance
        shell: bash
        id: hash
        run: |
          cd dist && echo "hashes=$(sha256sum * | base64 -w0)" >> "$GITHUB_OUTPUT"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
          retention-days: 7

  generate-provenance:
    needs: [build]
    permissions:
      actions: read
      id-token: write
      contents: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.1.0
    with:
      base64-subjects: "${{ needs.build.outputs.hashes }}"
      upload-assets: true

  publish-to-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build]
    environment:
      name: pypi
      url: https://pypi.org/p/make-api-request

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        # Use trusted publishing - no API token needed!
        # Configure this in your PyPI project settings first

  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build, generate-provenance]
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Download provenance
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.generate-provenance.outputs.provenance-name }}

      - name: Extract release notes
        id: extract-notes
        run: |
          # Extract version from tag
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Try to extract release notes from CHANGELOG.md if it exists
          if [ -f CHANGELOG.md ]; then
            # Extract notes between version headers
            sed -n "/^## \[${VERSION}\]/,/^## \[/p" CHANGELOG.md | sed '$d' > release_notes.md
            if [ ! -s release_notes.md ]; then
              echo "Release $VERSION" > release_notes.md
            fi
          else
            echo "Release $VERSION" > release_notes.md
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release v${{ steps.extract-notes.outputs.version }}
          body_path: release_notes.md
          files: |
            dist/*
            *.intoto.jsonl
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
          generate_release_notes: true