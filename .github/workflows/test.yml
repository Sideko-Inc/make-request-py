name: Test

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

concurrency:
  group: test-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        id: setup-python
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: "1.8.5"
          virtualenvs-create: true
          virtualenvs-in-project: true
          virtualenvs-path: .venv
          installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction

      - name: Install project
        run: poetry install --no-interaction

      - name: Run linting
        run: |
          poetry run ruff check .

      - name: Run type checking
        run: |
          poetry run pip install mypy
          poetry run mypy make_api_request

      - name: Run tests with coverage
        run: |
          poetry run pytest --cov=make_api_request --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.python-version == '3.11'
        with:
          file: ./coverage.xml
          fail_ci_if_error: false # don't fail when rate limited

  test-docs:
    name: Test documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          poetry install --no-interaction
          # Add docs dependencies if you have them
          # poetry install --extras docs

      - name: Check README renders
        run: |
          python -c "
          import pathlib
          readme = pathlib.Path('README.md')
          if readme.exists():
              content = readme.read_text()
              print(f'README.md has {len(content)} characters')
          else:
              print('No README.md found')
          "

  security-check:
    name: Security check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Run security audit
        run: |
          poetry run pip-audit --format=json --output=audit-results.json || true
          # Install bandit for additional security checks
          poetry run pip install bandit[toml]
          poetry run bandit -r make_api_request/ -f json -o bandit-results.json || true

      - name: Upload security results
        uses: actions/upload-artifact@v4
        with:
          name: security-results
          path: |
            audit-results.json
            bandit-results.json